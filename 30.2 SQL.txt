set global log_bin_trust_function_creators=1;

CREATE TABLE BOOKS (
                       BOOK_ID int(11) NOT NULL AUTO_INCREMENT,
                       TITLE varchar(255) NOT NULL,
                       PUBYEAR int(4) NOT NULL,
                       PRIMARY KEY (BOOK_ID)
);

CREATE TABLE READERS (
                         READER_ID int(11) NOT NULL AUTO_INCREMENT,
                         FIRSTNAME varchar(255) NOT NULL,
                         LASTNAME varchar(255) NOT NULL,
                         PESELID varchar(11) NOT NULL,
                         PRIMARY KEY (READER_ID)
);

CREATE TABLE RENTS (
                       RENT_ID int(11) NOT NULL AUTO_INCREMENT,
                       BOOK_ID int(11) NOT NULL,
                       READER_ID int(11) NOT NULL,
                       RENT_DATE datetime NOT NULL,
                       RETURN_DATE datetime,
                       PRIMARY KEY (RENT_ID),
                       FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
                       FOREIGN KEY (READER_ID) REFERENCES READERS(READER_ID)
);

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ("John", "Smith", "83012217938");

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ("Curtis", "Wilson", "75121002790");

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ("Cathy", "Booker", "90112801727");

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ("Marissa", "Cain", "84061908044");

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ("Muriel", "Fulton", "76081409269");

COMMIT;

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ("The Stranger", 1942);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ("In Search of Lost Time", 1927);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ("The Trial", 1925);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ("The Little Prince", 1943);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ("Man's Fate", 1933);

COMMIT;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (4, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 5 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 3, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 3, DATE_SUB(CURDATE(), INTERVAL 4 DAY), DATE_SUB(CURDATE(), INTERVAL 2 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 4, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 8 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 5, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

COMMIT;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
    SELECT * FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();

DROP PROCEDURE IF EXISTS ListBooks;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
    SELECT BOOK_ID, TITLE, PUBYEAR FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();

DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    RETURN 'Standard customer';
END $$

DELIMITER ;

SELECT VipLevel() AS LEVEL;

DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
    RETURN result;
END $$

DELIMITER ;

SELECT VipLevel() AS LEVEL;

DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel(booksrented INT) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
IF booksrented >= 10 THEN
    SET result = 'Gold customer';
ELSEIF booksrented >= 5 AND booksrented < 10 THEN
    SET result = 'Silver customer';
ELSEIF booksrented >= 2 AND booksrented < 5 THEN
    SET result = 'Bronze customer';
ELSE
    SET result = 'Standard customer';
END IF;
RETURN result;
END $$

DELIMITER ;

SELECT VipLevel(12) AS LEVEL;

DROP PROCEDURE IF EXISTS ListUserById;

DELIMITER $$

CREATE PROCEDURE ListUserById(id INT(11))
BEGIN
IF id > 0 THEN
    SELECT * FROM READERS
        WHERE READER_ID = id;
    ELSE
        SELECT 'Wrong ID';
END if;
END $$

DELIMITER ;

CALL ListUserById(1);

ALTER TABLE READERS ADD VIP_LEVEL VARCHAR(20);

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;

    SELECT COUNT(*) FROM RENTS
       WHERE READER_ID = 3
         INTO BOOKSREAD;

    SELECT BOOKSREAD;
END $$

DELIMITER ;

CALL UpdateVipLevels();

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = 3
    INTO BOOKSREAD;

    SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) FROM RENTS
    WHERE READER_ID = 3
    INTO DAYS;

    SELECT BOOKSREAD, DAYS;
END $$

DELIMITER ;

CALL UpdateVipLevels();

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = 3
    INTO BOOKSREAD;

    SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) FROM RENTS
    WHERE READER_ID = 3
    INTO DAYS;

    SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

    SELECT BOOKSREAD, DAYS, BOOKSPERMONTH;
END $$

DELIMITER ;

CALL UpdateVipLevels();

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD, DAYS, RDR_ID INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_READERS CURSOR FOR SELECT READER_ID FROM READERS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_READERS;
    WHILE (FINISHED = 0) DO
    FETCH ALL_READERS INTO RDR_ID;
    IF (FINISHED = 0) THEN
        SELECT COUNT(*) FROM RENTS
        WHERE READER_ID = RDR_ID
        INTO BOOKSREAD;

        SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
        WHERE READER_ID = RDR_ID
        INTO DAYS;

        SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

        UPDATE READERS SET VIP_LEVEL = VipLevel(BOOKSPERMONTH)
        WHERE READER_ID = RDR_ID;
        COMMIT;
    END IF;
        END WHILE;

    CLOSE ALL_READERS;
END $$

DELIMITER ;

CALL UpdateVipLevels();

SELECT * FROM READERS;

ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN DEFAULT 0;

SELECT * FROM BOOKS;

DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE BOOKSRENTED, BK_ID INT;
    DECLARE BESTSELLERDEF BOOLEAN;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_BOOKS;
    WHILE (FINISHED = 0) DO
    FETCH ALL_BOOKS INTO BK_ID;
    IF (FINISHED = 0) THEN
        SELECT COUNT(*) FROM RENTS
        WHERE BOOK_ID = BK_ID
        INTO BOOKSRENTED;

        IF (BOOKSRENTED > 2) THEN
            SET BESTSELLERDEF = 1;
            ELSE
                SET BESTSELLERDEF = 0;
                END IF;
        UPDATE BOOKS SET
            BESTSELLER = BESTSELLERDEF
        WHERE BOOK_ID = BK_ID;
        COMMIT;
    END IF;
        END WHILE;

    CLOSE ALL_BOOKS;
END $$

DELIMITER ;

CALL UpdateBestsellers();

SELECT * FROM BOOKS;

SHOW FUNCTION STATUS;

SHOW CREATE PROCEDURE UpdateVipLevels;

SET @RENTSQTY = 0;                                 -- [1]

DELIMITER $$

CREATE TRIGGER RENTSCOUNTER BEFORE INSERT ON RENTS -- [2]
    FOR EACH ROW
BEGIN
    SET @RENTSQTY = @RENTSQTY + 1;                  -- [3]
END $$

DELIMITER ;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(1, 3, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 3, DATE_SUB(CURDATE(), INTERVAL 2 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(3, 1, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 4, DATE_SUB(CURDATE(), INTERVAL 3 DAY), NULL);

COMMIT;

SELECT @RENTSQTY;

DROP TRIGGER RENTSCOUNTER;

CREATE TABLE RENTS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           RENT_ID INT(11) NOT NULL,
                           OLD_BOOK_ID INT(11),
                           NEW_BOOK_ID INT(11),
                           OLD_READER_ID INT(11),
                           NEW_READER_ID INT(11),
                           OLD_RENT_DATE DATETIME,
                           NEW_RENT_DATE DATETIME,
                           OLD_RETURN_DATE DATETIME,
                           NEW_RETURN_DATE DATETIME,
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER RENTS_INSERT AFTER INSERT ON RENTS                                        -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,   -- [2]
                           NEW_RENT_DATE, NEW_RETURN_DATE)                                -- [3]
        VALUE(CURTIME(), "INSERT", NEW.RENT_ID, NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE, -- [4]
              NEW.RETURN_DATE);                                                            -- [5]
END $$

DELIMITER ;

INSERT INTO RENTS (BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 4, DATE_SUB(CURDATE(), INTERVAL 7 DAY), NULL);

COMMIT;

DELIMITER $$

CREATE TRIGGER RENTS_DELETE AFTER DELETE ON RENTS          -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID) -- [2]
        VALUE(CURTIME(), "DELETE", OLD.RENT_ID);             -- [3]
END $$

DELIMITER ;

DELETE FROM RENTS WHERE RENT_ID = 12;

COMMIT;



DELIMITER $$

CREATE TRIGGER RENTS_UPDATE AFTER UPDATE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,
                           NEW_RENT_DATE, NEW_RETURN_DATE, OLD_BOOK_ID, OLD_READER_ID,
                           OLD_RENT_DATE, OLD_RETURN_DATE)
        VALUE(CURTIME(), "UPDATE", OLD.RENT_ID, NEW.BOOK_ID, NEW.READER_ID,
              NEW.RENT_DATE, NEW.RETURN_DATE, OLD.BOOK_ID, OLD.READER_ID,
              OLD.RENT_DATE, OLD.RETURN_DATE);
END $$

DELIMITER ;

UPDATE RENTS SET RETURN_DATE = CURDATE()
WHERE RENT_ID = 11;

COMMIT;

CREATE TABLE BOOKS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           OLD_TITLE VARCHAR(255),
                           NEW_TITLE VARCHAR(255),
                           OLD_PUBYEAR INT(4),
                           NEW_PUBYEAR INT(4),
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR)
        VALUE(CURTIME(), "INSERT", NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR);                                                            -- [5]
END $$

DELIMITER ;

INSERT INTO BOOKS (TITLE, PUBYEAR)
VALUES ('TITLE 1', '2004');

COMMIT;

DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID)
        VALUE(CURTIME(), "DELETE", OLD.BOOK_ID);
END $$

DELIMITER ;

DELETE FROM BOOKS WHERE BOOK_ID = 8;

COMMIT;

DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR,
                           OLD_TITLE, OLD_PUBYEAR)
        VALUE(CURTIME(), "UPDATE", BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
              OLD.TITLE, OLD.PUBYEAR);
END $$

DELIMITER ;

UPDATE BOOKS SET TITLE = 'New Title 1'
WHERE BOOK_ID = 5;

CREATE TABLE READERS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           READER_ID INT(11) NOT NULL,
                           OLD_FIRSTNAME VARCHAR(255),
                           NEW_FIRSTNAME VARCHAR(255),
                           OLD_LASTNAME VARCHAR(255),
                           NEW_LASTNAME VARCHAR(255),
                           OLD_PESELID VARCHAR(11),
                           NEW_PESELID VARCHAR(11),
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID)
        VALUE(CURTIME(), "INSERT", NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID);                                                            -- [5]
END $$

DELIMITER ;

INSERT INTO READERS (FIRSTNAME, LASTNAME, PESELID)
VALUES ('John', 'Johnson', '86923894420');

COMMIT;

DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE(CURTIME(), "DELETE", OLD.READER_ID);
END $$

DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 9;

COMMIT;

DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID,
                           OLD_FIRSTNAME, OLD_LASTNAME, OLD_PESELID)
        VALUE(CURTIME(), "UPDATE", READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID,
              OLD.FIRSTNAME, OLD.LASTNAME, OLD.PESELID);
END $$

DELIMITER ;

UPDATE READERS SET FIRSTNAME = 'New NAME 1'
WHERE READER_ID = 5;
